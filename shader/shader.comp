#version 450

struct Hittable {
  uint kind;
  vec3 center;
  vec3 normal;
  float radius;
  uint material_index;
};

struct Material {
  uint kind;
  vec3 color;
  float parameter;
  mat4 translation_mat1;
  mat4 translation_mat2;
  mat4 rotation_mat;
};

struct Camera {
  vec3 eye;
  vec3 center;
  vec3 up;
  float vfov;
  float defocus_angle;
  float focus_dist;
};

struct Ray {
  vec3 origin;
  vec3 direction;
};

vec3 ray_at(Ray ray, float t) { return ray.origin + t * ray.direction; }

struct HitRecord {
  bool valid;
  vec3 point;
  vec3 normal;
  float t;
  bool front_face;
  uint material_index;
};

struct ScatterResult {
  bool valid;
  Ray scattered_ray;
  vec3 attenuation;
};

struct Viewport {
  vec3 pixel_delta_u;
  vec3 pixel_delta_v;
  vec3 pixel00_location;
  vec3 defocus_disk_u;
  vec3 defocus_disk_v;
};

layout(binding = 0, rgba8_snorm) uniform image2D render_target;
layout(binding = 1, rgba16_snorm) uniform image2D summed_image;
layout(binding = 2) uniform Scene {
  uint hittables_count;
  Camera camera;
  Hittable[500] hittables;
  Material[500] materials;
}
scene;

layout(binding = 3) uniform RenderCallInfo {
  bool read_only;
  uint number;
  uint total_render_calls;
  uint total_samples;
}
render_call_info;

const uint HITTABLE_KIND_SPHERE = 0;
const uint HITTABLE_KIND_DISK = 1;

const uint MATERIAL_KIND_LAMBERTIAN = 0;
const uint MATERIAL_KIND_METAL = 1;
const uint MATERIAL_KIND_DIELECTRIC = 2;
const uint MATERIAL_KIND_PORTAL = 3;

const uint MAX_DEPTH = 50;
const float MAX_RAY_COLLISION_DISTANCE = 1e8;

uint hash(uint x) {
  x += (x << 10u);
  x ^= (x >> 6u);
  x += (x << 3u);
  x ^= (x >> 11u);
  x += (x << 15u);
  return x;
}

uint current_random_offset = 0;

float random() {
  current_random_offset++;
  const uvec4 v =
      floatBitsToUint(vec4(gl_GlobalInvocationID.xy, render_call_info.number,
                           current_random_offset));

  uint m = hash(v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w));
  m &= 0x007FFFFFu;
  m |= 0x3F800000u;
  return uintBitsToFloat(m) - 1.0f;
}

vec3 random_vec() { return vec3(random(), random(), random()); }

vec3 random_in_unit_sphere() {
  while (true) {
    const vec3 v = random_vec();
    if (dot(v, v) < 1)
      return v;
  }
}

vec3 random_unit_vec() { return normalize(random_in_unit_sphere()); }

vec3 random_in_unit_disk() {
  while (true) {
    const vec3 v = vec3(random(), random(), 0);
    if (dot(v, v) < 1)
      return v;
  }
}

HitRecord hit_sphere(uint index, Ray ray, float lo, float hi) {
  const Hittable sphere = scene.hittables[index];
  const vec3 oc = sphere.center - ray.origin;
  const float a = dot(ray.direction, ray.direction), h = dot(ray.direction, oc),
              c = dot(oc, oc) - sphere.radius * sphere.radius,
              discriminant = h * h - a * c;

  HitRecord res;
  res.valid = false;
  if (discriminant < 0)
    return res;

  const float sqrtd = sqrt(discriminant);
  float root = (h - sqrtd) / a;
  if (root <= lo || hi <= root) {
    root = (h + sqrtd) / a;
    if (root <= lo || hi <= root)
      return res;
  }

  res.valid = true;
  res.point = ray_at(ray, root);
  const vec3 outward_normal = (res.point - sphere.center) / sphere.radius;
  res.front_face = dot(ray.direction, outward_normal) < 0;
  res.normal = res.front_face ? outward_normal : -outward_normal;
  res.material_index = sphere.material_index;
  res.t = root;
  return res;
}

HitRecord hit_disk(uint index, Ray ray, float lo, float hi) {
  const Hittable disk = scene.hittables[index];
  const vec3 oc = disk.center - ray.origin;

  HitRecord res;
  res.valid = false;
  const float signed_dist = dot(oc, disk.normal);
  if (signed_dist <= 0)
    return res;

  const vec3 direction_normal = dot(disk.normal, ray.direction) * disk.normal;
  const float root = abs(signed_dist / dot(ray.direction, disk.normal));
  if (root <= lo || hi <= root)
    return res;

  res.point = ray_at(ray, root);
  if (distance(res.point, disk.center) > disk.radius)
    return res;
  res.valid = true;
  res.front_face = dot(ray.direction, disk.normal) < 0;
  res.normal = res.front_face ? disk.normal : -disk.normal;
  res.material_index = disk.material_index;
  res.t = root;
  return res;
}

HitRecord hit_world(Ray ray, float lo, float hi) {
  HitRecord world_hit;
  world_hit.valid = false;
  float closest = hi;

  for (uint i = 0; i < scene.hittables_count; i++) {
    const uint kind = scene.hittables[i].kind;
    HitRecord current;
    if (kind == HITTABLE_KIND_SPHERE)
      current = hit_sphere(i, ray, lo, closest);
    else
      current = hit_disk(i, ray, lo, closest);

    if (!current.valid)
      continue;

    world_hit = current;
    closest = current.t;
  }

  return world_hit;
}

ScatterResult scatter_lambertian(Ray ray, HitRecord record) {
  const Material material = scene.materials[record.material_index];
  const vec3 scatter_direction = record.normal + random_unit_vec();
  const Ray scattered = Ray(record.point, scatter_direction);
  return ScatterResult(true, scattered, material.color);
}

ScatterResult scatter_metal(Ray ray, HitRecord record) {
  const Material material = scene.materials[record.material_index];
  const vec3 reflected = normalize(reflect(ray.direction, record.normal)) +
                         material.parameter * random_unit_vec();
  const Ray scattered = Ray(record.point, reflected);

  if (dot(scattered.direction, record.normal) > 0)
    return ScatterResult(true, scattered, material.color);
  else
    return ScatterResult(false, Ray(vec3(0), vec3(0)), vec3(0));
}

float reflectance(float cosine, float refraction_index) {
  const float r0 =
      pow((1.0f - refraction_index) / (1.0f + refraction_index), 2.0f);
  return r0 + (1.0f - r0) * pow(1.0f - cosine, 5.0f);
}

ScatterResult scatter_dielectric(Ray ray, HitRecord record) {
  const Material material = scene.materials[record.material_index];
  const float ri =
      record.front_face ? 1.0f / material.parameter : material.parameter;
  const vec3 unit_direction = normalize(ray.direction);

  const float cos_theta = min(dot(-unit_direction, record.normal), 1.0f),
              sin_theta = sqrt(1.0f - cos_theta * cos_theta);

  vec3 direction;
  if (ri * sin_theta > 1.0f || reflectance(cos_theta, ri) > random())
    direction = reflect(unit_direction, record.normal);
  else {
    const vec3 r_out_perp = ri * (unit_direction + cos_theta * record.normal),
               r_out_parallel = -sqrt(abs(1.0f - dot(r_out_perp, r_out_perp))) *
                                record.normal;
    direction = r_out_perp + r_out_parallel;
  }

  const Ray scattered = Ray(record.point, direction);
  return ScatterResult(true, scattered, vec3(1, 1, 1));
}

ScatterResult scatter_portal(Ray ray, HitRecord record) {
  const Material material = scene.materials[record.material_index];
  const vec3 cp = vec3(material.translation_mat1 * vec4(record.point, 1.0f)),
             cp_rotated = vec3(material.rotation_mat * vec4(cp, 0.0f)),
             origin = vec3(material.translation_mat2 * vec4(cp_rotated, 1.0f)),
             direction =
                 vec3(material.rotation_mat * vec4(ray.direction, 0.0f));
  const Ray scattered = Ray(origin, direction);
  return ScatterResult(true, scattered, vec3(1, 1, 1));
}

ScatterResult scatter(uint index, Ray ray, HitRecord record) {
  const Material material = scene.materials[index];
  if (material.kind == MATERIAL_KIND_LAMBERTIAN)
    return scatter_lambertian(ray, record);
  else if (material.kind == MATERIAL_KIND_METAL)
    return scatter_metal(ray, record);
  else if (material.kind == MATERIAL_KIND_DIELECTRIC)
    return scatter_dielectric(ray, record);
  else
    return scatter_portal(ray, record);
}

vec3 ambient_light(Ray ray) {
  const vec3 unit_direction = normalize(ray.direction);
  const float a = 0.5f * (unit_direction.y + 1.0f);
  return (1.0f - a) * vec3(1, 1, 1) + a * vec3(0.5, 0.7, 1.0);
}

vec3 ray_color(Ray ray) {
  vec3 attenuation = vec3(1, 1, 1);
  Ray current_ray = ray;

  for (uint depth = 0; depth < MAX_DEPTH; depth++) {
    HitRecord record =
        hit_world(current_ray, 0.001, MAX_RAY_COLLISION_DISTANCE);
    if (!record.valid)
      break;

    ScatterResult material_hit =
        scatter(record.material_index, current_ray, record);
    if (!material_hit.valid)
      return vec3(0, 0, 0);

    current_ray = material_hit.scattered_ray;
    attenuation *= material_hit.attenuation;
  }

  return attenuation * ambient_light(current_ray);
}

vec3 defocus_disk_sample(Viewport viewport) {
  const vec3 p = random_in_unit_disk();
  return scene.camera.eye + p.x * viewport.defocus_disk_u +
         p.y * viewport.defocus_disk_v;
}

Ray get_ray(Viewport viewport) {
  const vec3 offset = vec3(random() - 1, random() - 1, 0),
             pixel_sample =
                 viewport.pixel00_location +
                 (gl_GlobalInvocationID.x + offset.x) * viewport.pixel_delta_u +
                 (gl_GlobalInvocationID.y + offset.y) * viewport.pixel_delta_v,
             origin = scene.camera.defocus_angle <= 0.0f
                          ? scene.camera.eye
                          : defocus_disk_sample(viewport),
             direction = pixel_sample - origin;
  return Ray(origin, direction);
}

layout(local_size_x = 16, local_size_y = 8) in;
void main() {
  if (render_call_info.read_only)
    return;

  const vec2 image_size = vec2(imageSize(render_target));
  const float aspect_ratio = image_size.x / image_size.y;
  const float theta = radians(scene.camera.vfov), h = tan(theta / 2),
              viewport_height = 2.0f * h * scene.camera.focus_dist,
              viewport_width = viewport_height * aspect_ratio,
              defocus_radius = scene.camera.focus_dist *
                               tan(radians(scene.camera.defocus_angle / 2));
  const vec3 w = normalize(scene.camera.eye - scene.camera.center),
             u = normalize(cross(scene.camera.up, w)), v = cross(w, u),
             viewport_u = viewport_width * u, viewport_v = -viewport_height * v,
             viewport_upper_left = scene.camera.eye -
                                   (scene.camera.focus_dist * w) -
                                   viewport_u / 2.0f - viewport_v / 2.0f,
             pixel_delta_u = viewport_u / image_size.x,
             pixel_delta_v = viewport_v / image_size.y,
             pixel00_location =
                 viewport_upper_left + 0.5f * (pixel_delta_u + pixel_delta_v),
             defocus_disk_u = defocus_radius * u,
             defocus_disk_v = defocus_radius * v;
  const Viewport viewport =
      Viewport(pixel_delta_u, pixel_delta_v, pixel00_location, defocus_disk_u,
               defocus_disk_v);

  const uint samples_per_pass =
      render_call_info.total_samples / render_call_info.total_render_calls;

  vec3 summed_pixel =
      imageLoad(summed_image, ivec2(gl_GlobalInvocationID.xy)).rgb;
  for (uint i = 0; i < samples_per_pass; i++) {
    const Ray ray = get_ray(viewport);
    summed_pixel += ray_color(ray) / render_call_info.total_samples;
  }

  imageStore(summed_image, ivec2(gl_GlobalInvocationID.xy),
             vec4(summed_pixel, 1));

  const vec3 current_color =
      sqrt(summed_pixel * render_call_info.total_samples /
           float((render_call_info.number + 1) * samples_per_pass));

  imageStore(render_target, ivec2(gl_GlobalInvocationID.xy),
             vec4(current_color, 1));
}
